// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Avartar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avartar");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("biography");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("AuthorId")
                        .HasName("PK__authors__86516BCF7E187956");

                    b.HasIndex(new[] { "AuthorId" }, "UQ__authors__86516BCE3D9E071B")
                        .IsUnique();

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<int?>("AvailableCopies")
                        .HasColumnType("int")
                        .HasColumnName("available_copies");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<byte[]>("Cover")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("cover");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<decimal?>("DamageFee")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("damage_fee");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_link");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("MaxCopiesPerShelf")
                        .HasColumnType("int")
                        .HasColumnName("max_copies_per_shelf");

                    b.Property<string>("PdfLink")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pdf_link");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("PublishYear")
                        .HasColumnType("int")
                        .HasColumnName("publish_year");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("publisher_id");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.Property<int?>("Views")
                        .HasColumnType("int")
                        .HasColumnName("views");

                    b.Property<bool?>("Warehouse")
                        .HasColumnType("bit")
                        .HasColumnName("warehouse");

                    b.HasKey("BookId")
                        .HasName("PK__books__490D1AE1E874427C");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("SupplierId");

                    b.HasIndex(new[] { "BookId" }, "UQ__books__490D1AE02AB25E2D")
                        .IsUnique();

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("Models.BookAccessForMemberGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookGroupId")
                        .HasColumnType("int")
                        .HasColumnName("book_group_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("PK__book_acc__3213E83FAA555A86");

                    b.HasIndex("BookGroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex(new[] { "Id" }, "UQ__book_acc__3213E83EF167CF2F")
                        .IsUnique();

                    b.ToTable("book_access_for_member_groups", (string)null);
                });

            modelBuilder.Entity("Models.BookCopy", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<string>("CopiesNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("copies_number");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("is_available");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("ShelfId")
                        .HasColumnType("int")
                        .HasColumnName("shelf_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.Property<bool>("Warehouse")
                        .HasColumnType("bit")
                        .HasColumnName("warehouse");

                    b.HasKey("BookId")
                        .HasName("PK__book_cop__490D1AE19BD3C2BB");

                    b.HasIndex("ShelfId");

                    b.HasIndex(new[] { "BookId" }, "UQ__book_cop__490D1AE0FA28F52C")
                        .IsUnique();

                    b.ToTable("book_copies", (string)null);
                });

            modelBuilder.Entity("Models.BookGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("GroupId")
                        .HasName("PK__book_gro__D57795A063510C0C");

                    b.HasIndex(new[] { "GroupId" }, "UQ__book_gro__D57795A16C06433E")
                        .IsUnique();

                    b.ToTable("book_groups", (string)null);
                });

            modelBuilder.Entity("Models.BookInGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("PK__book_in___3213E83F683D11D4");

                    b.HasIndex("BookId");

                    b.HasIndex("GroupId");

                    b.HasIndex(new[] { "Id" }, "UQ__book_in___3213E83EE3F5513A")
                        .IsUnique();

                    b.ToTable("book_in_groups", (string)null);
                });

            modelBuilder.Entity("Models.Bookshelf", b =>
                {
                    b.Property<int>("ShelfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("shelf_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShelfId"));

                    b.Property<int>("ColumnNumber")
                        .HasColumnType("int")
                        .HasColumnName("column_number");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int")
                        .HasColumnName("row_number");

                    b.Property<int?>("ShelfNumber")
                        .HasColumnType("int")
                        .HasColumnName("shelf_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("ShelfId")
                        .HasName("PK__bookshel__E33A5B7C58D0B7C2");

                    b.HasIndex(new[] { "ShelfId" }, "UQ__bookshel__E33A5B7D2BD61285")
                        .IsUnique();

                    b.ToTable("bookshelves", (string)null);
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("CategoryId")
                        .HasName("PK__categori__D54EE9B481A10DEA");

                    b.HasIndex(new[] { "CategoryId" }, "UQ__categori__D54EE9B5110FC622")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Models.FavoritesList", b =>
                {
                    b.Property<int>("FavoritesListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("favorites_list_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoritesListId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("FavoritesListId")
                        .HasName("PK__favorite__DD78BFC57543047C");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "FavoritesListId" }, "UQ__favorite__DD78BFC4A567845B")
                        .IsUnique();

                    b.ToTable("favorites_list", (string)null);
                });

            modelBuilder.Entity("Models.Fee", b =>
                {
                    b.Property<int>("FeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fee_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("FeeType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fee_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("max_price");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("min_price");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("FeeId")
                        .HasName("PK__fees__A19C8AFB1BA01D69");

                    b.HasIndex(new[] { "FeeId" }, "UQ__fees__A19C8AFA04EA1C6D")
                        .IsUnique();

                    b.ToTable("fees", (string)null);
                });

            modelBuilder.Entity("Models.LiquidatedBook", b =>
                {
                    b.Property<int>("LiquidatedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("liquidated_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LiquidatedId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<int>("CopyId")
                        .HasColumnType("int")
                        .HasColumnName("copy_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("LiquidatedBy")
                        .HasColumnType("int")
                        .HasColumnName("liquidated_by");

                    b.Property<DateTime>("LiquidatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("liquidated_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("price");

                    b.HasKey("LiquidatedId")
                        .HasName("PK__liquidat__BEBBDCCCE09DCC65");

                    b.HasIndex("BookId");

                    b.HasIndex("CopyId");

                    b.HasIndex(new[] { "LiquidatedId" }, "UQ__liquidat__BEBBDCCD70DB55A3")
                        .IsUnique();

                    b.ToTable("liquidated_books", (string)null);
                });

            modelBuilder.Entity("Models.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("loan_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanId"));

                    b.Property<decimal>("BorrowFee")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("borrow_fee");

                    b.Property<int>("CopyId")
                        .HasColumnType("int")
                        .HasColumnName("copy_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("due_date");

                    b.Property<decimal>("Fine")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("fine");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime")
                        .HasColumnName("loan_date");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime")
                        .HasColumnName("return_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("LoanId")
                        .HasName("PK__loans__A1F79554CC5BBD8B");

                    b.HasIndex("CopyId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "LoanId" }, "UQ__loans__A1F79555F3668C26")
                        .IsUnique();

                    b.ToTable("loans", (string)null);
                });

            modelBuilder.Entity("Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("member_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("address");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("balance");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("gender");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("IdCardNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id_card_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("MembershipFee")
                        .HasColumnType("int")
                        .HasColumnName("membership_fee");

                    b.Property<DateTime?>("MembershipFeeDueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("membership_fee_due_date");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("profile_picture");

                    b.Property<string>("ResetPin")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reset_pin");

                    b.Property<DateTime?>("ResetPinExpire")
                        .HasColumnType("datetime")
                        .HasColumnName("reset_pin_expire");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("MemberId")
                        .HasName("PK__members__B29B8534C892D180");

                    b.HasIndex(new[] { "MemberId" }, "UQ__members__B29B853542E36638")
                        .IsUnique();

                    b.ToTable("members", (string)null);
                });

            modelBuilder.Entity("Models.MemberGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<int>("Fee")
                        .HasColumnType("int")
                        .HasColumnName("fee");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("GroupId")
                        .HasName("PK__member_g__D57795A00F48C8A8");

                    b.HasIndex(new[] { "GroupId" }, "UQ__member_g__D57795A11A31DE30")
                        .IsUnique();

                    b.ToTable("member_groups", (string)null);
                });

            modelBuilder.Entity("Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("message");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__notifica__E059842FD9DF56BB");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "NotificationId" }, "UQ__notifica__E059842E4CC60288")
                        .IsUnique();

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Models.Penalty", b =>
                {
                    b.Property<int>("PenaltyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("penalty_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PenaltyId"));

                    b.Property<int>("CoverTear")
                        .HasColumnType("int")
                        .HasColumnName("cover_tear");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LoanId")
                        .HasColumnType("int")
                        .HasColumnName("loan_id");

                    b.Property<int>("OverDue")
                        .HasColumnType("int")
                        .HasColumnName("over_due");

                    b.Property<int>("PageLoss")
                        .HasColumnType("int")
                        .HasColumnName("page_loss");

                    b.Property<int>("SpineDamage")
                        .HasColumnType("int")
                        .HasColumnName("spine_damage");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.Property<int>("Writing")
                        .HasColumnType("int")
                        .HasColumnName("writing");

                    b.HasKey("PenaltyId")
                        .HasName("PK__penaltie__0AAEFF0BE5A63B9C");

                    b.HasIndex("LoanId");

                    b.HasIndex(new[] { "PenaltyId" }, "UQ__penaltie__0AAEFF0A96B0BBF6")
                        .IsUnique();

                    b.ToTable("penalties", (string)null);
                });

            modelBuilder.Entity("Models.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("publisher_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("PublisherId")
                        .HasName("PK__publishe__3263F29D19516640");

                    b.HasIndex(new[] { "PublisherId" }, "UQ__publishe__3263F29C5EBE5068")
                        .IsUnique();

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("Models.ReadingProgress", b =>
                {
                    b.Property<int>("ProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("progress_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgressId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("member_id");

                    b.Property<int?>("ReadingProgress1")
                        .HasColumnType("int")
                        .HasColumnName("reading_progress");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("ProgressId")
                        .HasName("PK__reading___49B3D8C157882949");

                    b.HasIndex("BookId");

                    b.HasIndex("MemberId");

                    b.HasIndex(new[] { "ProgressId" }, "UQ__reading___49B3D8C08DF0930C")
                        .IsUnique();

                    b.ToTable("reading_progress", (string)null);
                });

            modelBuilder.Entity("Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<string>("Comment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId")
                        .HasName("PK__reviews__60883D90C64EC143");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ReviewId" }, "UQ__reviews__60883D916980E7F5")
                        .IsUnique();

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("StaffId")
                        .HasName("PK__staff__1963DD9CC2B536E8");

                    b.HasIndex(new[] { "StaffId" }, "UQ__staff__1963DD9DCEBD7C88")
                        .IsUnique();

                    b.ToTable("staff", (string)null);
                });

            modelBuilder.Entity("Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("contact_info");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("SupplierId")
                        .HasName("PK__supplier__6EE594E838C5466C");

                    b.HasIndex(new[] { "SupplierId" }, "UQ__supplier__6EE594E92367A745")
                        .IsUnique();

                    b.ToTable("suppliers", (string)null);
                });

            modelBuilder.Entity("Models.Book", b =>
                {
                    b.HasOne("Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_Books_Authors");

                    b.HasOne("Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Books_Categories");

                    b.HasOne("Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .HasConstraintName("FK_Books_Publishers");

                    b.HasOne("Models.Supplier", "Supplier")
                        .WithMany("Books")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Books_Suppliers");

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Publisher");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Models.BookAccessForMemberGroup", b =>
                {
                    b.HasOne("Models.BookGroup", "BookGroup")
                        .WithMany("BookAccessForMemberGroups")
                        .HasForeignKey("BookGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_BookAccessForMemberGroups_BookGroups");

                    b.HasOne("Models.MemberGroup", "Group")
                        .WithMany("BookAccessForMemberGroups")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_BookAccessForMemberGroups_MemberGroups");

                    b.Navigation("BookGroup");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Models.BookCopy", b =>
                {
                    b.HasOne("Models.Book", "Book")
                        .WithOne("BookCopy")
                        .HasForeignKey("Models.BookCopy", "BookId")
                        .IsRequired()
                        .HasConstraintName("FK_BookCopies_Books");

                    b.HasOne("Models.Bookshelf", "Shelf")
                        .WithMany("BookCopies")
                        .HasForeignKey("ShelfId")
                        .IsRequired()
                        .HasConstraintName("FK_BookCopies_Bookshelves");

                    b.Navigation("Book");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("Models.BookInGroup", b =>
                {
                    b.HasOne("Models.Book", "Book")
                        .WithMany("BookInGroups")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_BookInGroups_Books");

                    b.HasOne("Models.BookGroup", "Group")
                        .WithMany("BookInGroups")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_BookInGroups_BookGroups");

                    b.Navigation("Book");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Models.FavoritesList", b =>
                {
                    b.HasOne("Models.Book", "Book")
                        .WithMany("FavoritesLists")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_FavoritesList_Books");

                    b.HasOne("Models.Member", "User")
                        .WithMany("FavoritesLists")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_FavoritesList_Members");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.LiquidatedBook", b =>
                {
                    b.HasOne("Models.Book", "Book")
                        .WithMany("LiquidatedBooks")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_LiquidatedBooks_Books");

                    b.HasOne("Models.BookCopy", "Copy")
                        .WithMany("LiquidatedBooks")
                        .HasForeignKey("CopyId")
                        .IsRequired()
                        .HasConstraintName("FK_LiquidatedBooks_BookCopies");

                    b.Navigation("Book");

                    b.Navigation("Copy");
                });

            modelBuilder.Entity("Models.Loan", b =>
                {
                    b.HasOne("Models.BookCopy", "Copy")
                        .WithMany("Loans")
                        .HasForeignKey("CopyId")
                        .IsRequired()
                        .HasConstraintName("FK_Loans_BookCopies");

                    b.HasOne("Models.Member", "User")
                        .WithMany("Loans")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Loans_Members");

                    b.Navigation("Copy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Notification", b =>
                {
                    b.HasOne("Models.Member", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_Members");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Penalty", b =>
                {
                    b.HasOne("Models.Loan", "Loan")
                        .WithMany("Penalties")
                        .HasForeignKey("LoanId")
                        .IsRequired()
                        .HasConstraintName("FK_Penalties_Loans");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Models.ReadingProgress", b =>
                {
                    b.HasOne("Models.Book", "Book")
                        .WithMany("ReadingProgresses")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_ReadingProgress_Books");

                    b.HasOne("Models.Member", "Member")
                        .WithMany("ReadingProgresses")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_ReadingProgress_Members");

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Models.Review", b =>
                {
                    b.HasOne("Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_Reviews_Books");

                    b.HasOne("Models.Member", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Reviews_Members");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Models.Book", b =>
                {
                    b.Navigation("BookCopy");

                    b.Navigation("BookInGroups");

                    b.Navigation("FavoritesLists");

                    b.Navigation("LiquidatedBooks");

                    b.Navigation("ReadingProgresses");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Models.BookCopy", b =>
                {
                    b.Navigation("LiquidatedBooks");

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Models.BookGroup", b =>
                {
                    b.Navigation("BookAccessForMemberGroups");

                    b.Navigation("BookInGroups");
                });

            modelBuilder.Entity("Models.Bookshelf", b =>
                {
                    b.Navigation("BookCopies");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Models.Loan", b =>
                {
                    b.Navigation("Penalties");
                });

            modelBuilder.Entity("Models.Member", b =>
                {
                    b.Navigation("FavoritesLists");

                    b.Navigation("Loans");

                    b.Navigation("Notifications");

                    b.Navigation("ReadingProgresses");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Models.MemberGroup", b =>
                {
                    b.Navigation("BookAccessForMemberGroups");
                });

            modelBuilder.Entity("Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Models.Supplier", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
